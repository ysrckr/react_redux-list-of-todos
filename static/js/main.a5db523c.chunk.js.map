{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["currentTodoReducer","state","action","type","payload","initialState","query","status","filterReducer","todosReducer","filter","todo","id","rootReducer","combineReducers","currentTodo","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","className","TodoList","openModal","isOpen","dispatch","useState","isLoading","SetIsLoading","useEffect","ts","map","t","finally","cleanQuery","trim","toLowerCase","filteredTodos","completed","title","includes","length","cn","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","style","pointerEvents","TodoModal","close","selectedTodo","setIsLoading","user","setUser","userId","data","href","email","name","App","setIsOpen","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5db523c.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import type { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET';\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR';\n};\n\ntype ChangeStatusAction = {\n  type: 'status/SET';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filter/CLEAR',\n});\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Action = SetQueryAction | ClearQueryAction | ChangeStatusAction;\n\nexport const actions = { setQuery, clearQuery, changeStatus };\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/CLEAR':\n      return {\n        ...state,\n        query: '',\n      };\n\n    case 'status/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todo/SET';\n  payload: Todo;\n};\n\ntype RemoveTodoAction = {\n  type: 'todo/REMOVE';\n  payload: number;\n};\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'todo/SET',\n  payload: todo,\n});\n\nconst removeTodo = (id: number): RemoveTodoAction => ({\n  type: 'todo/REMOVE',\n  payload: id,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo[];\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst initialState: State = [];\n\nconst todosReducer = (state: State = initialState, action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return [...state, action.payload];\n\n    case 'todo/REMOVE':\n      return state.filter((todo) => todo.id !== action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { getTodos } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  openModal: () => void;\n  isOpen: boolean;\n};\n\nexport const TodoList: React.FC<Props> = ({ openModal, isOpen }) => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const [isLoading, SetIsLoading] = useState(false);\n\n  // prettier-ignore\n  useEffect(() => {\n    SetIsLoading(true);\n    getTodos()\n      .then((ts) => ts.map(t => dispatch({\n        type: 'todo/SET',\n        payload: t,\n      })))\n      .finally(() => SetIsLoading(false));\n  }, []);\n\n  const cleanQuery = query.trim().toLowerCase();\n\n  const filteredTodos = todos\n    .filter(todo => {\n      if (status === 'completed') {\n        return todo.completed;\n      }\n\n      if (status === 'active') {\n        return !todo.completed;\n      }\n\n      return todo;\n    })\n    .filter(todo => todo.title.toLowerCase().includes(cleanQuery));\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr key={todo.id} data-cy=\"todo\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={cn({\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      openModal();\n                      dispatch({\n                        type: 'currentTodo/SET',\n                        payload: todo,\n                      });\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn('far', {\n                          'fa-eye': !isOpen,\n                          'fa-eye-slash': isOpen,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n              dispatch({\n                type: 'status/SET',\n                payload: e.target.value as Status,\n              });\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          // prettier-ignore\n          onChange={(e: ChangeEvent<HTMLInputElement>) => dispatch({\n            type: 'filter/SET',\n            payload: e.target.value,\n          })}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              // prettier-ignore\n              onClick={() => dispatch({\n                type: 'filter/CLEAR',\n              })}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  close: () => void;\n  isOpen: boolean;\n};\n\nexport const TodoModal: React.FC<Props> = ({ close, isOpen }) => {\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(selectedTodo?.userId || 0)\n      .then((data) => setUser(data))\n      .finally(() => setIsLoading(false));\n  }, [selectedTodo]);\n\n  return (\n    <div\n      className={cn('modal', {\n        'is-active': isOpen,\n      })}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {!isLoading && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={close}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              {user && <a href={`mailto:${user.email}`}>{user.name}</a>}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  const openModal = () => {\n    setIsOpen(true);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList openModal={openModal} isOpen={isOpen} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isOpen && <TodoModal close={closeModal} isOpen={isOpen} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}